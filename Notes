March 20

I have downlaoded the raspberrypi/linux repo on my computer to look at the linux kernel that runs on the raspi so that I can understand the kernel better.

March 22

Now I am working on the encoding part of the project.
After looking at various schemes I am gong to continue with a 3 bit encoding, two encoding bits with a check bit. 
It can only detect and not correct errors, so then the bit will have to be resent.
Some troubles I have ran into is that integers in c are encoded in bytes, and I cannot go from char -> int becuase it does not compress the data as much as id like. 

I am also using geany as a code editor.

After thinking about it for a little bit (haha) I think that I would like to use a 4 bit encoding scheme.
Then I could store two nucleotides as a byte.
Use repetition as a check, not fancy but simple. Also can translate to hex easily

a= 0000 = 0
t= 0101 = 5
c= 1010 = A
g= 1111 = F

 
On second thinking, I will go back to the 2 bit encoding scheme.
Then 4 characters will be translated to one character. 
Then send character at a time to the cpu to align, then send to memory to add to bigger matirix.

----4/2

a= 00 
t= 01 
c= 10 
g= 11 

Need to read up on fwrite with binary files. I would like to make sure that I can get the most out of my compresion.
Right now I believe id be writing a binary file of integers, but need to be better than that.

---4/3
When encoding the nucleotides to binary, we would go as to represent them as hex. A pair of nucleotides could be represented by one hex. Below is the table. Note that they are in order of hex, and that means they are grouped by the second letter in the pair. 

AA=0	AG=4	AC=8	AT=C
GA=1	GG=5	GC=9	GT=D
CA=2	CG=6	CC=A	CT=E
TA=3	TG=7	TC=B	TT=F

With this encoding scheme we are able to have 4 different options for alignment:
single indel, double indel, match, switch.

Right now I am using 15 switch cases for encoding. Looking for a better way to do this.

Now I need to make get rid of the first line in the FASTA file, also make sure that all the nucleotides are in the same case(UPPER)

----

4/4
Things to talk to professor about:

	Is the attack of encoding the right way to do it.
	Scoring Shema/scoring matrix
	using fwrite to write a binary file, don't wanna use int or hex(ASCII) 
	look at example FASTA files, right now i'm using a test file made by me.2


Notes from Prof:

	look at EmBoss for a comparison of speed
	Do the two schemes get the same score?
	Can it get the best alignment? (compaired to emboss)
	Speed comparisons
	Is paralleled version faster than single CPU?

	Use packing of bits to get the best compression
	look at ASCII character, or look at memory usage

Questions for me to ponder:
	What code will be on the raspi?
	how to run the code on raspi?

	need to do lower level stuff than I am already doing
-----

4/6

thinking more about encoding, what I want to do now is:
take four nucleotides at a time and convert them to one byte character.
that is we take the first letter, convert to its two bit hex, 
take the second character convert to its two bit hex then bitshift over 2
then OR with the first character.
Then store the four characters in one and write to the file.

Now on to alignment: 

we can take the character in hex, and check one hex at a time then OR again, and
if the alignment is greater than 0 we have a mismatch
Then if it is less than 15 it is within the first two nucleotides
if it is between 16 and 128 it is within the second two nucleotides
if it is greater than 128 then there is a misalignment within both pairs of pairs.


-----

4/8


Starting to review optimization for the algorithm. Here is info on caches size of the cpu (BCM2837)
L1: 32KB L2: 512KB
Make sure to have cache hits
look at loop size and such.


---
4/9

Things to talk to prof about:
Is encoding scheme good. also talk about the null character
Talk about alignment using the OR operator, and if it is ok to just align the 4 nucleotides in one. 
Using makefile and compiling on my laptop then transfer compiled code to the RPI then
running that code on the RPI.
----

4/10

Before talking to profesor I was able to solve some problems.
When I was storing encoding as chars, I changed to unsigned ints, solves three problems:
can have \n character for the endof the sequence. 
Can go all the way to 0xFFFF (before 0xFF would be an unknown character)

----
4/15

I have the test algorithm done, I have downlaoded a FASTA from homework three which has around 6,000 bp.

One problem that I see is that the file has \n after a few bp's. So short of editiing my prep code more, just to run the test code I may have to maually take out the \n so I can get a good benchmark for time on the RPI. ill do that now and update once the testing is done.

started to take out the \n's but its too long. Ill figure out some way to have the code do it.

So I have started to run the testAlgo on the RPI and the programmed gets killed everytime due to memory usage.
I did a print check and it gets to about row 4585 when it needs to go to row 24742. So for the code to be run on the raspi it needs to be optimized. So that is the first result that we get from this lab! or we could increase memory size of the raspi but either way its a result.


----
4/17

So now I will add the print alignment.

----
4/23

I am getting some verry odd bugs in the algoTest code. Namely when I try to write the - as a space in the file 
it does not come out that way. What I have deduced it to is that within the while and switch statements, fwrite
starts to get wonky in ways that are above me. I have talked to some c pros(friends and friends dads) and they are not sure what it could be.
I have also searched on the internet on popular sites and there doesnt seem to be the same problem.
I may have to leave it in as it is not a critical error, that is it will still input a character signifying a space, just not the one I want. I have spent hours debugging this and it is time to move on.

so now I will finish up the encoding code and the optimized code and load the optimized code along with the test code to the raspi and run the tests.

Then I will start on my final report. 

Notes on progress:

I wish that I could have done better with optimizing than I did. 
I basically emplored the basic optimization techniques that I learned in Comp. Systems. 
from here I would like to make a cluster and implement it. Within the cluster I would make embedded systems. 
I would also like to have had a better understanding of the c language. I learned alot while doing this project, but there are many more things that I feel I should have known.






